package asgn2Tests;

import org.junit.Test;


import asgn2Exceptions.*;
import asgn2Pizzas.*;

import java.time.LocalTime;


/**
 * A class that that tests the asgn2Pizzas.MargheritaPizza, asgn2Pizzas.VegetarianPizza, asgn2Pizzas.MeatLoversPizza classes. 
 * Note that an instance of asgn2Pizzas.MeatLoversPizza should be used to test the functionality of the 
 * asgn2Pizzas.Pizza abstract class. 
 * 
 * @author Person B
 *
 */


public class PizzaTests {
	
	//Test Pizza constructor correctly parses values to margherita pizza 
	@Test
	public void TestPizzaConstructor_forMargherita_Correct() throws PizzaException{
		LocalTime orderTime = LocalTime.now();
		LocalTime deliverTime = LocalTime.now().plusMinutes(10);
		Pizza c = PizzaFactory.getPizza("PZM", 1, orderTime, deliverTime);
		assert(c instanceof MargheritaPizza);
	}
	
	//Test Pizza constructor doesn't create margherita pizza when different code is entered
	@Test
	public void TestPizzaConstructor_forMargherita_WrongCode() throws PizzaException{
		LocalTime orderTime = LocalTime.now();
		LocalTime deliverTime = LocalTime.now().plusMinutes(10);
		Pizza c = PizzaFactory.getPizza("PZV", 1, orderTime, deliverTime);
		assert!(c instanceof MargheritaPizza);
	}
	
	//Test Pizza constructor correctly parses values to meatlovers pizza 
	@Test
	public void TestPizzaConstructor_forML_Correct() throws PizzaException{
		LocalTime orderTime = LocalTime.now();
		LocalTime deliverTime = LocalTime.now().plusMinutes(10);
		Pizza c = PizzaFactory.getPizza("PZL", 1, orderTime, deliverTime);
		assert(c instanceof MeatLoversPizza);
	}
	
	//Test Pizza constructor doesn't create meatlovers pizza when different code is entered
	@Test
	public void TestPizzaConstructor_forML_WrongCode() throws PizzaException{
		LocalTime orderTime = LocalTime.now();
		LocalTime deliverTime = LocalTime.now().plusMinutes(10);
		Pizza c = PizzaFactory.getPizza("PZV", 1, orderTime, deliverTime);
		assert!(c instanceof MeatLoversPizza);
	}
	
	//Test Pizza constructor correctly parses values to vego pizza 
	@Test
	public void TestPizzaConstructor_forVeg_Correct() throws PizzaException{
		LocalTime orderTime = LocalTime.now();
		LocalTime deliverTime = LocalTime.now().plusMinutes(10);
		Pizza c = PizzaFactory.getPizza("PZV", 1, orderTime, deliverTime);
		assert(c instanceof VegetarianPizza);
	}
	
	//Test Pizza constructor doesn't create veg pizza when different code is entered
	@Test
	public void TestPizzaConstructor_forVeg_WrongCode() throws PizzaException{
		LocalTime orderTime = LocalTime.now();
		LocalTime deliverTime = LocalTime.now().plusMinutes(10);
		Pizza c = PizzaFactory.getPizza("PZM", 1, orderTime, deliverTime);
		assert!(c instanceof VegetarianPizza);
	}
	
	//Test Pizza constructor doesn't parse a random code
	@Test(expected = PizzaException.class)
	public void TestPizzaConstructor_WrongCode() throws PizzaException{
		LocalTime orderTime = LocalTime.now();
		LocalTime deliverTime = LocalTime.now().plusMinutes(10);
		Pizza c = PizzaFactory.getPizza("PPP", 1, orderTime, deliverTime);

	}
	
	
	//Test Pizza constructor throws exception when delivery time is less than 10 mins (cooking time)
	@Test(expected = PizzaException.class)
	public void TestPizzaConstructor_tooShort() throws PizzaException{
		LocalTime orderTime = LocalTime.now();
		LocalTime deliverTime = LocalTime.now().plusMinutes(9);
		Pizza c = PizzaFactory.getPizza("PZM", 1, orderTime, deliverTime);
		assert(c instanceof MargheritaPizza);
	}
	
	//Test Pizza constructor throws exception when delivery time is more than 1 hr
	@Test(expected = PizzaException.class)
	public void TestPizzaConstructor_tooLong() throws PizzaException{
		LocalTime orderTime = LocalTime.now();
		LocalTime deliverTime = LocalTime.now().plusMinutes(65);
		Pizza c = PizzaFactory.getPizza("PZM", 1, orderTime, deliverTime);
		assert(c instanceof MargheritaPizza);
	}
	
	//Test Pizza constructor throws exception when no pizzas are ordered
	@Test(expected = PizzaException.class)
	public void TestPizzaConstructor_noPizza() throws PizzaException{
		LocalTime orderTime = LocalTime.now();
		LocalTime deliverTime = LocalTime.now().plusMinutes(15);
		Pizza c = PizzaFactory.getPizza("PZM", 0, orderTime, deliverTime);
		assert(c instanceof MargheritaPizza);
	}
	
	//Test Pizza constructor throws exception when more than 10 pizzas are ordered
	@Test(expected = PizzaException.class)
	public void TestPizzaConstructor_tooManyPizza() throws PizzaException{
		LocalTime orderTime = LocalTime.now();
		LocalTime deliverTime = LocalTime.now().plusMinutes(15);
		Pizza c = PizzaFactory.getPizza("PZM", 20, orderTime, deliverTime);
		assert(c instanceof MargheritaPizza);
	}
	
	//Pizza correctly calculates cost of Magherita pizza
	@Test
	public void TestMagheritaCostperPizza() throws PizzaException{
		double knownCost = 1.5;
		LocalTime orderTime = LocalTime.now();
		LocalTime deliverTime = LocalTime.now().plusMinutes(15);
		Pizza pizza = PizzaFactory.getPizza("PZM", 10, orderTime, deliverTime);
		double cost = pizza.getCostPerPizza();
		assert(cost == knownCost);
	}
	
	//Pizza correctly calculates cost of Meat Lovers pizza
		@Test
		public void TestMeatLoversCostperPizza() throws PizzaException{
			double knownCost = 5;
			LocalTime orderTime = LocalTime.now();
			LocalTime deliverTime = LocalTime.now().plusMinutes(15);
			Pizza pizza = PizzaFactory.getPizza("PZL", 10, orderTime, deliverTime);
			double cost = pizza.getCostPerPizza();
			assert(cost == knownCost);
		}
		
		//Pizza correctly calculates cost of Veg pizza
		@Test
		public void TestVegCostperPizza() throws PizzaException{
			double knownCost = 5.5;
			LocalTime orderTime = LocalTime.now();
			LocalTime deliverTime = LocalTime.now().plusMinutes(15);
			Pizza pizza = PizzaFactory.getPizza("PZV", 10, orderTime, deliverTime);
			double cost = pizza.getCostPerPizza();
			assert(cost == knownCost);
		}
		
		//Pizza correctly returns the price of a pizza
		@Test
		public void TestPriceperPizza() throws PizzaException{
			double knownPrice = 10;
			LocalTime orderTime = LocalTime.now();
			LocalTime deliverTime = LocalTime.now().plusMinutes(15);
			Pizza pizza = PizzaFactory.getPizza("PZV", 10, orderTime, deliverTime);
			double price = pizza.getPricePerPizza();
			assert(price == knownPrice);
		}
		
		//Get order cost is correct
		@Test
		public void testOrderCost() throws PizzaException{
			double knownCost = 3;
			LocalTime orderTime = LocalTime.now();
			LocalTime deliverTime = LocalTime.now().plusMinutes(15);
			Pizza pizza = PizzaFactory.getPizza("PZM", 2, orderTime, deliverTime);
			double orderCost = pizza.getOrderCost();
			assert(orderCost == knownCost);
		}
		
		//Get order price is correct
		@Test
		public void testOrderPrice() throws PizzaException{
			double knownPrice = 16;
			LocalTime orderTime = LocalTime.now();
			LocalTime deliverTime = LocalTime.now().plusMinutes(15);
			Pizza pizza = PizzaFactory.getPizza("PZM", 2, orderTime, deliverTime);
			double orderPrice = pizza.getOrderPrice();
			assert(orderPrice == knownPrice);
		}
		
		//Get order profit is correct
		@Test
		public void testOrderProfit() throws PizzaException{
			double knownProfit = 13;
			LocalTime orderTime = LocalTime.now();
			LocalTime deliverTime = LocalTime.now().plusMinutes(15);
			Pizza pizza = PizzaFactory.getPizza("PZM", 2, orderTime, deliverTime);
			double orderProfit = pizza.getOrderProfit();
			assert(orderProfit == knownProfit);
		}
		
		//Test that getTopping returns correct
		@Test
		public void testGetTopping_Correct() throws PizzaException{
			
			LocalTime orderTime = LocalTime.now();
			LocalTime deliverTime = LocalTime.now().plusMinutes(15);
			Pizza pizza = PizzaFactory.getPizza("PZM", 2, orderTime, deliverTime);
			
			assert(pizza.containsTopping(PizzaTopping.CHEESE) == true);
		}
		
		//Test that getTopping returns false when untrue
		@Test
		public void testGetTopping_Wrong() throws PizzaException{
			
			LocalTime orderTime = LocalTime.now();
			LocalTime deliverTime = LocalTime.now().plusMinutes(15);
			Pizza pizza = PizzaFactory.getPizza("PZM", 2, orderTime, deliverTime);
			boolean contains = pizza.containsTopping(PizzaTopping.BACON);
			assert(contains == false);
		}
		
		//Test if get quantity returns correct value
		@Test
		public void testGetQuantity() throws PizzaException{
			int quantity = 2;
			LocalTime orderTime = LocalTime.now();
			LocalTime deliverTime = LocalTime.now().plusMinutes(15);
			Pizza pizza = PizzaFactory.getPizza("PZM", quantity, orderTime, deliverTime);
			
			assert(pizza.getQuantity() == quantity);
		}
		
		
	
}
